//P1: AP and VP cannot happen simultaneously.
//P2: VS or VP must be true within AVI after an atrial event AS or AP.
//P3: AS or AP must be true within AEI after a ventricular event VS or VP.
//P4: After a ventricular event VS or VP, another ventricular event can happen only after URI.

function p1p2p3p4;
interface of p1p2p3p4 {
	in bool AS, VS;  //in here means that they're going from PLANT to CONTROLLER
	out bool AP, VP; //out here means that they're going from CONTROLLER to PLANT
}

policy p1p2p3p4 of p1p2p3p4 {
	internals {
		dtimer_t v;
		dtimer_t p4;
        constant uint16_t aviTicks := 1000;
        constant uint16_t aeiTicks := 1000;
        constant uint16_t uriTicks := 900;
	}

	states {

        init {	
			-> pre_ASAP on (VS || VP): v := 0, p4 := 0;
			-> pre_VSVP on (AS || AP): v := 0, p4 := 0;
			-> init on !(VS || VP) && !(AS || AP);
		}

		//wait for an AS || AP, should come before AEI ticks
		//ensure no AP && VP at same time
		pre_ASAP {												
			-> pre_VSVP_pre_URI on (AS || AP) && !(AP && VP): v := 0;
			-> pre_ASAP on !(AS || AP) && v <= aeiTicks && !(AP && VP);

			-> violation on (v > aeiTicks) recover AP := 1;
			-> violation on (AP && VP) recover VP := 0;

		}

		//wait for uriTicks to pass and then go to pre_VSVP (or pre_ASAP if it arrives exactly on the boundary)
		//ensure no AP && VP at the same time
		//p4 will always elapse before v, as AEI+AVI is the maximum time between VS/VP, 
		//and URI is the minimum time
		//hence in this state we ignore v
		pre_VSVP_pre_URI {
			-> pre_VSVP on !VP && p4 > uriTicks && !(AP && VP);
			-> pre_ASAP on (VS || VP) && p4 > uriTicks && !(AP && VP): p4 := 0, v := 0;
			-> pre_ASAP on (VS && !VP) && !(AP && VP): p4 := 0, v := 0;
			-> pre_VSVP_pre_URI on !(VS || VP) && p4 <= uriTicks && !(AP && VP);

			-> violation on (AP && VP) recover AP := 0;
			-> violation on (VP) && p4 <= uriTicks recover VP := 0;
		}

		//wait for a VS || VP, should come before AVI ticks
		//ensure no AP && VP at the same time
        pre_VSVP {
            -> pre_ASAP on (VS || VP) && !(AP && VP): p4 := 0;
			-> pre_VSVP on !(VS || VP) && v <= aviTicks && !(AP && VP);

            -> violation on (v > aviTicks) recover VP := 1;
			-> violation on (AP && VP) recover AP := 0;
        }
	}
}
