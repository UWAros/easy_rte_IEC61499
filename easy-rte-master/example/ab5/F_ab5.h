
//This file should be called F_ab5.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>
#include <assert.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum ab5_policy_AB5_states { 
	POLICY_STATE_ab5_AB5_s0, 
	POLICY_STATE_ab5_AB5_s1,
	POLICY_STATE_ab5_AB5_violation 
};


//Inputs to the function ab5
typedef struct {
	bool A;
	
} inputs_ab5_t;

//Outputs from the function ab5
typedef struct {
	bool B;
	
} outputs_ab5_t;

//enforcer state and vars:
typedef struct {
	enum ab5_policy_AB5_states _policy_AB5_state;
	//internal vars
	dtimer_t v;
	
	
	
} enforcervars_ab5_t;




//This function is provided in "F_ab5.c"
//It sets up the variable structures to their initial values
void ab5_init_all_vars(enforcervars_ab5_t* me, inputs_ab5_t* inputs, outputs_ab5_t* outputs);

//This function is provided in "F_ab5.c"
//It will run the synthesised enforcer and call the controller function
void ab5_run_via_enforcer(enforcervars_ab5_t* me, inputs_ab5_t* inputs, outputs_ab5_t* outputs);

//This function is provided from the user
//It is the controller function
extern void ab5_run(inputs_ab5_t* inputs, outputs_ab5_t* outputs);

//enforcer functions


//This function is provided in "F_ab5.c"
//It will run the input enforcer for ab5's policy AB5
void ab5_run_input_enforcer_AB5(enforcervars_ab5_t* me, inputs_ab5_t* inputs);

//This function is provided in "F_ab5.c"
//It will run the input enforcer for ab5's policy AB5
void ab5_run_output_enforcer_AB5(enforcervars_ab5_t* me, inputs_ab5_t* inputs, outputs_ab5_t* outputs);

//This function is provided in "F_ab5.c"
//It will check the state of the enforcer monitor code
//It returns one of the following:
//0: currently true (safe)
//1: always true (safe)
//-1: currently false (unsafe)
//-2: always false (unsafe)
//It will need to do some reachability analysis to achieve this
int ab5_check_rv_status_AB5(enforcervars_ab5_t* me);


